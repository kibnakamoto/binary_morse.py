alphabetical_dictionary_binascii = {
    'a' : '1100001'.zfill(8),
    'A' : '1000001'.zfill(8),
    'b' : '1100010'.zfill(8),
    'B' : '1000010'.zfill(8),
    'c' : '1100011'.zfill(8),
    'C' : '1000011'.zfill(8),
    'd' : '1100100'.zfill(8),
    'D' : '1000100'.zfill(8),
    'e' : '1100101'.zfill(8),
    'E' : '1000101'.zfill(8),
    'f' : '1100110'.zfill(8),
    'F' : '1000110'.zfill(8),
    'g' : '1100111'.zfill(8),
    'G' : '1000111'.zfill(8),
    'h' : '1001000'.zfill(8),
    'H' : '1101000'.zfill(8),
    'i' : '1101001'.zfill(8),
    'I' : '1001001'.zfill(8),
    'j' : '1101010'.zfill(8),
    'J' : '1001010'.zfill(8),
    'k' : '1101011'.zfill(8),
    'K' : '1001011'.zfill(8),
    'l' : '1101100'.zfill(8),
    'L' : '1001100'.zfill(8),
    'm' : '1101101'.zfill(8),
    'M' : '1001101'.zfill(8),
    'n' : '1101110'.zfill(8),
    'N' : '1001110'.zfill(8),
    'o' : '1101111'.zfill(8),
    'O' : '1001111'.zfill(8),
    'p' : '1110000'.zfill(8),
    'P' : '1010000'.zfill(8),
    'q' : '1110001'.zfill(8),
    'Q' : '1010001'.zfill(8),
    'r' : '1110010'.zfill(8),
    'R' : '1010010'.zfill(8),
    's' : '1110011'.zfill(8),
    'S' : '1010011'.zfill(8),
    't' : '1110100'.zfill(8),
    'T' : '1010100'.zfill(8),
    'u' : '1110101'.zfill(8),
    'U' : '1010101'.zfill(8),
    'v' : '1110110'.zfill(8),
    'V' : '1010110'.zfill(8),
    'w' : '1110111'.zfill(8),
    'W' : '1010111'.zfill(8),
    'x' : '1111000'.zfill(8),
    'X' : '1011000'.zfill(8),
    'y' : '1111001'.zfill(8),
    'Y' : '1011001'.zfill(8),
    'z' : '1111010'.zfill(8),
    'Z' : '1011010'.zfill(8),
    '0' : ''.zfill(8),
    '1' : '1'.zfill(8),
    '2' : '10'.zfill(8),
    '3' : '11'.zfill(8),
    '4' : '100'.zfill(8),
    '5' : '101'.zfill(8),
    '6' : '110'.zfill(8),
    '7' : '111'.zfill(8),
    '8' : '1000'.zfill(8),
    '9' : '1001'.zfill(8),
    '10' : '1010'.zfill(8),
    '.' : '101110'.zfill(8),
    ',' : '101100'.zfill(8),
    '/' : '101111'.zfill(8)
}

morse_dictionary = {
    'a' : '. _ ',
    'b' : '_ . . .',
    'c' : '_ . _ .',
    'd' : '_ . .',
    'e' : '.',
    'f' : '. . _ .',
    'g' : '_ _ .',
    'h' : '. . . .',
    'i' : '. .',
    'j' : '. _ _ _',
    'k' : '_ . _',
    'l' : '. _ . .',
    'm' : '_ _',
    'n' : '_ .',
    'o' : '_ _ _',
    'p' : '. _ _ .',
    'q' : '_ _ . _',
    'r' : '. _ .',
    's' : '. . .',
    't' : '_',
    'u' : '. . _',
    'v' : '. . . _',
    'w' : '. _ _',
    'x' : '_ . . _',
    'y' : '_ . _ _',
    'z' : '_ _ . .',
    'A' : '. _ ',
    'B' : '_ . . .',
    'C' : '_ . _ .',
    'D' : '_ . .',
    'E' : '.',
    'F' : '. . _ .',
    'G' : '_ _ .',
    'H' : '. . . .',
    'I' : '. .',
    'J' : '. _ _ _',
    'K' : '_ . _',
    'L' : '. _ . .',
    'M' : '_ _',
    'N' : '_ .',
    'O' : '_ _ _',
    'P' : '. _ _ .',
    'Q' : '_ _ . _',
    'R' : '. _ .',
    'S' : '. . .',
    'T' : '_',
    'U' : '. . _',
    'V' : '. . . _',
    'W' : '. _ _',
    'X' : '_ . . _',
    'Y' : '_ . _ _',
    'Z' : '_ _ . .',
    '0' : '_ _ _ _ _',
    '1' : '. _ _ _ _',
    '2' : '. . _ _ _',
    '3' : '. . . _ _',
    '4' : '. . . . _',
    '5' : '. . . . .',
    '6' : '_ . . . .',
    '7' : '_ _ . . .',
    '8' : '_ _ _ . .',
    '9' : '_ _ _ _ .',
    ' ' : '       ',
    '10' : (f"{1,0}"),
    '.' : '. _ . _ . _',
    ',' : '_ _ . . _ _',
    '/' : ''
}


choice = input("(M)orse or (B)inary: ")
if choice == "B" or choice == "b":
    print ("Binary operation (ascii)")
    word = input("Input: ")
    print(f"{word}: ", end='')
    for letter in word:
        print(f"{alphabetical_dictionary_binascii[letter]} ", end='')
    print('')  # new line
elif choice == "M" or choice == "m":
    print ("Morse operation")
    terminate = False
    while not terminate:
        word = input("Input: ")
        if word == "<Q>" or word == "<q>":
            terminate = True
        else:
            print(f"{word}: ", end='')
            for letter in word:
                print(f"{morse_dictionary[letter]}   ", end='')
            print('')  # new line
else:
    print ("Invalid choice! Please try again")
